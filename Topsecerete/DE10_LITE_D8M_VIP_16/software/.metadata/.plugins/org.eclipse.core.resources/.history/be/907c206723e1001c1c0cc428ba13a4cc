
#include <stdio.h>
#include "unistd.h"
#include "system.h"
#include "alt_types.h"
#include "altera_avalon_uart_regs.h"
#include "sys\alt_irq.h"
#include "I2C_core.h"
#include "terasic_includes.h"
#include "mipi_camera_config.h"
#include "mipi_bridge_config.h"

#include "auto_focus.h"

#include <fcntl.h>
#include <unistd.h>

#define EEE_IMGPROC_MSG_START ('R'<<16 | 'B'<<8 | 'B')

//offsets
#define EEE_IMGPROC_STATUS 0
#define EEE_IMGPROC_MSG 1
#define EEE_IMGPROC_ID 2
#define EEE_IMGPROC_BBCOL 3

#define EXPOSURE_INIT 0x002000
#define EXPOSURE_STEP 0x100
#define GAIN_INIT 0x080
#define GAIN_STEP 0x040
#define DEFAULT_LEVEL 3

#define MIPI_REG_PHYClkCtl		0x0056
#define MIPI_REG_PHYData0Ctl	0x0058
#define MIPI_REG_PHYData1Ctl	0x005A
#define MIPI_REG_PHYData2Ctl	0x005C
#define MIPI_REG_PHYData3Ctl	0x005E
#define MIPI_REG_PHYTimDly		0x0060
#define MIPI_REG_PHYSta			0x0062
#define MIPI_REG_CSIStatus		0x0064
#define MIPI_REG_CSIErrEn		0x0066
#define MIPI_REG_MDLSynErr		0x0068
#define MIPI_REG_FrmErrCnt		0x0080
#define MIPI_REG_MDLErrCnt		0x0090

alt_u8 txdata=5;
alt_u8 rxdata=0;

//UART中断服务函数
void IRQ_UART_Interrupts(){
 rxdata = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);//将rxdata寄存器中存储的值读入变量rxdata中
 txdata = rxdata;//串口自收发，将变量rxdata的值赋给txdata
 while(!(IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE)& ALTERA_AVALON_UART_STATUS_TRDY_MSK));
 //查询发送准备接收信号，如果没有准备好，则等待
 IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE,txdata);//发送准备好，发送txdata
}

//中断初始化函数
void IRQ_init()
{
 //清除状态寄存器
 IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
 //使能接收准备中断，给控制寄存器相应位写1
 IORD_ALTERA_AVALON_UART_CONTROL(UART_0_BASE);

 alt_ic_isr_register(
		 UART_0_IRQ_INTERRUPT_CONTROLLER_ID,//注册ISR
		 UART_0_IRQ,//中断控制器标号，从system.h复制
   IRQ_UART_Interrupts,//UART中断服务函数
   0x0,//指向与设备驱动实例相关的数据结构体
   0x0);//flags，保留未用
}

int main()
{

  IRQ_init();
//  while(1){
//   IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, 0xcc);
//
//  }
  while(1);
  return 0;
}

